import google.generativeai as genai
import json
import os
from dotenv import load_dotenv
import difflib
import re

# API kulcs bet√∂lt√©se
load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY")
if not API_KEY:
    raise ValueError("Hiba: nincs API kulcs be√°ll√≠tva az .env f√°jlban!")
genai.configure(api_key=API_KEY)

# A szab√°lyzat JSON form√°tum√∫ adatbet√∂lt√©se
def load_data(file_path="data/szabalyzat.json"):
    """Bet√∂lti a JSON form√°tum√∫ k√∂nyvt√°rhaszn√°lati szab√°lyzatot."""
    with open(file_path, "r", encoding="utf-8") as f:
        return json.load(f)

# Sz√∂veg el≈ëfeldolgoz√°sa a keres√©shez
def preprocess_query(query):
    """Elt√°vol√≠tja az √≠r√°sjeleket √©s kisbet≈±s√≠ti a keres√©si kifejez√©st."""
    query = query.lower().strip()
    query = re.sub(r"[^\w\s]", "", query)  # Minden √≠r√°sjel elt√°vol√≠t√°sa
    return query

# Keres≈ë funkci√≥ (rugalmas keres√©s)
def search_library_rules(query, top_n=3):
    """Kulcsszavas √©s hasonl√≥s√°gi keres√©s a szab√°lyzatban."""
    data = load_data()
    query = preprocess_query(query)

    # Egyszer≈± keres√©s (pontosan tartalmazza-e a k√©rd√©st?)
    results = {title: content for title, content in data.items() if query in preprocess_query(title) or query in preprocess_query(content)}

    # Hasonl√≥s√°gi keres√©s, ha nincs pontos egyez√©s
    if not results:
        best_match = difflib.get_close_matches(query, [preprocess_query(t) for t in data.keys()], n=1, cutoff=0.5)
        if best_match:
            original_title = [title for title in data.keys() if preprocess_query(title) == best_match[0]][0]
            results[original_title] = data[original_title]

    return dict(list(results.items())[:top_n]) if results else {"Nincs tal√°lat": "A keresett inform√°ci√≥ nem tal√°lhat√≥ a szab√°lyzatban."}

# Gemini API h√≠v√°s
def ask_gemini(context, query):
    """A keresett szab√°lyzat alapj√°n v√°lasz gener√°l√°sa a Gemini LLM-mel."""
    model = genai.GenerativeModel("gemini-1.5-flash")
     # Lev√°gjuk a sz√∂veget, hogy ne legyen t√∫l hossz√∫
    trimmed_context = context[:400]  # Maximum 400 karakteres prompt, mert mindig timeout-ol
    prompt = (
        f"A k√∂nyvt√°r szab√°lyzat√°b√≥l keresett relev√°ns inform√°ci√≥:\n\n"
        f"{trimmed_context}\n\n"
        f"A fenti inform√°ci√≥k alapj√°n v√°laszolj r√∂viden √©s t√∂m√∂ren:\n\n"
        f"K√©rd√©s: {query}"
    )
    try:
        response = model.generate_content(prompt)
        return response.text if response else "Hiba t√∂rt√©nt a v√°lasz gener√°l√°sakor."
    except Exception as e:
        return f"Hiba t√∂rt√©nt a Gemini API h√≠v√°s sor√°n: {str(e)}"

# Chatbot f≈ë funkci√≥
def chatbot_response(query):
    """A felhaszn√°l√≥i k√©rd√©s feldolgoz√°sa: keres√©s a szab√°lyzatban √©s v√°laszgener√°l√°s."""
    search_results = search_library_rules(query)
    
    if "Nincs tal√°lat" in search_results:
        return "A k√©rd√©sre nem tal√°lhat√≥ inform√°ci√≥ a szab√°lyzatban."

    # üîπ Ha t√∂bb tal√°lat van, csak az els≈ët haszn√°ljuk, hogy ne legyen t√∫l hossz√∫
    first_result_title, first_result_content = next(iter(search_results.items()))

    print(f"Keres√©si tal√°lat a Gemini sz√°m√°ra: {first_result_title}: {first_result_content[:200]}...")  # DEBUG

    return ask_gemini(first_result_content, query)

# Teszt futtat√°s
if __name__ == "__main__":
    user_question = input("K√©rd√©s: ")
    response = chatbot_response(user_question)
    print("\nüí¨ Chatbot v√°lasza:\n", response)